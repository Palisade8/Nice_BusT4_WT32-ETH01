#sends packets via uart to the Nice BUS T4
#tested on Esp32-eth01

substitutions:
  device_name: "nice-bust4-uart"
  device_name_friendly: "Nice BusT4"
  api_password: !secret     wt32_eth01_api_password
  ota_password: !secret     wt32_eth01_ota_password
  mqtt_broker_address: !secret   mqtt_broker_address
  led_gpio:                 GPIO2
  DS18B20_pin:              GPIO4
  light_relay_pin:          GPIO14
  device_ip: 192.168.2.111
  network_gateway: 192.168.2.1
  network_subnet: 255.255.255.0

esphome:
  name: ${device_name}
  friendly_name: ${device_name_friendly}
  on_boot:
    - priority: 600  # После подключения к WiFi
      then:
        - delay: 30s
        - lambda: |-
            static bool rtc_synced = false;
            if (!rtc_synced && id(ntp_time).now().is_valid()) {
              // Проверяем, остановлены ли часы
              id(my_rtc).update();
              auto rtc_time = id(my_rtc).now();
              
              // Синхронизируем только если часы остановлены или показывают 2000 год
              if (!rtc_time.is_valid() || rtc_time.year == 2000) {
                auto ntp_now = id(ntp_time).now();
                id(my_rtc).now() = ntp_now;
                id(my_rtc).write_time();
                ESP_LOGI("main", "RTC synchronized with NTP: %s", ntp_now.strftime("%Y-%m-%d %H:%M:%S").c_str());
              } else {
                ESP_LOGI("main", "RTC already set: %s", rtc_time.strftime("%Y-%m-%d %H:%M:%S").c_str());
              }
              rtc_synced = true;
            } else if (!rtc_synced) {
              ESP_LOGW("main", "NTP time not available for RTC sync");
            }

esp32:
  board: wt32-eth01
  framework:
    type: arduino

# Enable logging
logger:
  level: DEBUG
  baud_rate: 115200

ota:
  - platform: esphome
    password: $ota_password

# Enable web server (can be disabled)
web_server:
  port: 80

# Configure I2C for Tiny RTC module (SDA=GPIO17, SCL=GPIO5)
i2c:
  sda: GPIO32
  scl: GPIO33
  scan: true # Optional: helps to verify if RTC is detected

# Real-Time Clock (Tiny RTC DS1307) component
time:
  - platform: sntp
    id: ntp_time
    servers:
      - 0.ru.pool.ntp.org
      - ntp2.vniiftri.ru
      - ntp.ix.ru
    timezone: Europe/Moscow

  - platform: ds1307
    id: my_rtc

text_sensor:
  - platform: template
    name: "Current Time"
    id: current_time
    icon: "mdi:clock"
    lambda: |-
      id(my_rtc).update();
      auto time_now = id(my_rtc).now();
      if (time_now.is_valid()) {
        return time_now.strftime("%Y-%m-%d %H:%M:%S");
      } else {
        return std::string("Time not set");
      }
    update_interval: 1s

  - platform: wifi_info
    ip_address:
      name: "Device IP"
      id: device_ip
      icon: "mdi:ip-network"
      update_interval: 60s  # Проверяем IP 1 раз в 60 секунд

external_components:
  - source:
      type: git
      url: https://github.com/Palisade8/Nice_BusT4_WT32-ETH01/
    refresh: 0s

# Primary WiFi Network
wifi:
  networks:
    - ssid: !secret wifi_ssid
      password: !secret wifi_password

  # Secondary WiFi Network
    - ssid: !secret wifi_ssid_ZPS
      password: !secret wifi_password_ZPS

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Nice Fallback Hotspot"
    password: "SKXZ6FPAdwIC"

# Enable Home Assistant API
api:
  encryption:
    key: "4ny/UyjsLzkyT5Kf5a3/5uQi7+VUAWLLdGKfN4H0QUs="
  reboot_timeout: 0s # otherwise reboots when disconnected from hassio  
  services:
  # to send hex commands to the bus T4
  - service: raw_command
    variables:
        raw_cmd: string
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::send_raw_cmd(raw_cmd);
         
  - service: send_inf_command
    variables:
       to_addr: string
       whose: string
       command: string
       type_command: string
       next_data: string
       data_on: bool
       data_command: string
    then:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd(to_addr, whose, command, type_command, next_data, data_on, data_command);

  # closing force
  - service: closing_force
    variables:
      force: string
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::set_mcu("4b", force);         

  # opening force
  - service: opening_force
    variables:
      force: string
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::set_mcu("4a", force);

  # sash length recognition
  - service: gate_length_recognition
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::set_mcu("0b","01");

  # BlueBus device recognition
  - service: devices_recognition
    then:
      lambda: |-
         my_nice_cover -> NiceBusT4::set_mcu("0a","01"); 

# Buttons for sending commands
button:
  - platform: template
    name: "Sync RTC with NTP"
    icon: "mdi:clock-sync"
    on_press:
      - lambda: |-
          if (id(ntp_time).now().is_valid()) {
            auto ntp_now = id(ntp_time).now();
            id(my_rtc).now() = ntp_now;
            id(my_rtc).write_time();
            ESP_LOGI("main", "RTC manually synchronized: %s", ntp_now.strftime("%Y-%m-%d %H:%M:%S").c_str());
          } else {
            ESP_LOGW("main", "NTP time not available for sync");
          }

  - platform: template
    name: "Update values"
    id: update_values
    on_press:
      then:
        - component.update: pause_time_number
        - component.update: sbs_mode_select

  - platform: template
    name: "Step-by-step"
    id: sbs
    on_press:
      lambda: |-
           my_nice_cover -> NiceBusT4::send_cmd(bus_t4::SBS);

  - platform: template
    name: "Partial opening 1"
    id: p_opn1
    on_press:
      lambda: |-
         my_nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN1);

  - platform: template
    name: "Input status"
    id: in_stat
    on_press:
      lambda: |-
           my_nice_cover -> NiceBusT4::send_raw_cmd("55.0D.00.03.00.66.08.06.6B.04.D0.99.00.00.4D.0D");
  
switch:
  - platform: restart
    name: "Nice WT32-ETH01 Restart"

  - platform: gpio
    name: "Gate Light"
    pin: ${light_relay_pin}

  - platform: template
    name: "l1L1 - Auto close"
    id: auto_close
    restore_mode: DISABLED
    lambda: |-
      if (my_nice_cover -> NiceBusT4::autocls_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "01");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");              
    turn_off_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "00");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");          

  - platform: template
    name: "l1L2 - Close after photo"
    id: close_after_photo
    restore_mode: DISABLED
    lambda: |-
      if (my_nice_cover -> NiceBusT4::photocls_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "a9", "00", true, "01");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "99", "00", true, "01");              
    turn_off_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "a9", "00", true, "00");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "99", "00", true, "01");        

  - platform: template
    name: "l1L3 - Always close Active"
    id: always_close
    restore_mode: DISABLED
    lambda: |-
      if (my_nice_cover -> NiceBusT4::alwayscls_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "88", "a9", "00", true, "01");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "88", "99", "00", true, "01");              
    turn_off_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "88", "a9", "00", true, "00");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "88", "99", "00", true, "01");

  - platform: template
    name: "l1L4 - StandBy"
    id: standby
    restore_mode: DISABLED
    lambda: |-
      if (my_nice_cover -> NiceBusT4::standby_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "8C", "a9", "00", true, "01");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "8C", "99", "00", true, "01");              
    turn_off_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "8C", "a9", "00", true, "00");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "8C", "99", "00", true, "01");
  
  - platform: template
    name: "l1L5 - Peak"
    id: peak
    restore_mode: DISABLED
    lambda: |-
      if (my_nice_cover -> NiceBusT4::peak_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "90", "a9", "00", true, "01");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "90", "99", "00", true, "01");              
    turn_off_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "90", "a9", "00", true, "00");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "90", "99", "00", true, "01");

  - platform: template
    name: "l1L6 - Pre-flashing"
    id: pre_flashing
    restore_mode: DISABLED
    lambda: |-
      if (my_nice_cover -> NiceBusT4::preflashing_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "94", "a9", "00", true, "01");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "94", "99", "00", true, "01");              
    turn_off_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "94", "a9", "00", true, "00");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "94", "99", "00", true, "01");

  - platform: template
    name: "l1L8 - Slave mode"
    id: slave_mode
    restore_mode: DISABLED
    lambda: |-
      if (my_nice_cover -> NiceBusT4::slavemode_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "98", "a9", "00", true, "01");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "98", "99", "00", true, "01");              
    turn_off_action:
      lambda: |-
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "98", "a9", "00", true, "00");
        my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "98", "99", "00", true, "01");

cover:
  - platform: bus_t4
    name: "Nice RB400"
    id: my_nice_cover
    device_class: gate

number:
  - platform: template
    name: "l2L1 - Pause time"
    id: pause_time_number
    min_value: 0
    max_value: 250
    step: 5
    icon: 'mdi:cog'
    mode: 'box'
    lambda: |-
      return(my_nice_cover -> NiceBusT4::pause_time);
    set_action:
      then:
        - lambda: |-
            int pause_time_to_set = x;
            char pause_time_hex[3];
            snprintf(pause_time_hex, sizeof(pause_time_hex), "%02X", pause_time_to_set);
            my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "81", "a9", "00", true, pause_time_hex);
            my_nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "81", "99", "00", true, "01"); 
            ESP_LOGD("main", "Pause time hex %s (hex)", pause_time_hex);
        - delay: 1s  
        - lambda: |-
            id(pause_time_number).publish_state(my_nice_cover -> NiceBusT4::pause_time);

select:
# L2 - step by step mode -----------------------------------------
  - platform: template
    name: "l2L2 - SBS mode select"
    id: sbs_mode_select
    options:
      - 'L1 - Open - stop - close - stop'
      - 'L2 - Open - stop - close - open'
      - 'L3 - Open - close - open - close'
      - 'L4 - Residential unit'
      - 'L5 - Residential unit 2 (stops after 2")'
      - 'L6 - Step by Step 2 (opens partially under 2")'
      - 'L7 - Manual'
      - 'L8 - Open in "semi-automatic" mode, close in "manual" mode'
    lambda: |-
        switch (my_nice_cover -> NiceBusT4::step_by_step_mode) {
          case 1:
            return std::string("L1 - Open - stop - close - stop");
          case 2:
            return std::string("L2 - Open - stop - close - open");
          case 3:
            return std::string("L3 - Open - close - open - close");
          case 4:
            return std::string("L4 - Residential unit");
          case 5:
            return std::string("L5 - Residential unit 2 (stops after 2\")");
          case 6:
            return std::string("L6 - Step by Step 2 (opens partially under 2\")");
          case 7:
            return std::string("L7 - Manual");
          case 8:
            return std::string("L8 - Open in \"semi-automatic\" mode, close in \"manual\" mode");
          default:
            return std::string("L1 - Open - stop - close - stop");
        }
    set_action:
      then:
        - lambda: |-
            int mode = 1;
            if (x == "L1 - Open - stop - close - stop") mode = 1;
            else if (x == "L2 - Open - stop - close - open") mode = 2;
            else if (x == "L3 - Open - close - open - close") mode = 3;
            else if (x == "L4 - Residential unit") mode = 4;
            else if (x == "L5 - Residential unit 2 (stops after 2\")") mode = 5;
            else if (x == "L6 - Step by Step 2 (opens partially under 2\")") mode = 6;
            else if (x == "L7 - Manual") mode = 7;
            else if (x == "L8 - Open in \"semi-automatic\" mode, close in \"manual\" mode") mode = 8;
            
            // Здесь добавьте код для отправки команды на устройство
            // my_nice_cover -> NiceBusT4::set_step_by_step_mode(mode);
