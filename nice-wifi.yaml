#Sends packets via uart to the Nice BUS T4
#Tested on WT32_ETH01 & Nice Robus 400

substitutions:
  device_name: "nice-robus-400-bust4-uart"
  device_name_friendly: "Nice Robus 400"
  api_password: !secret     wt32_eth01_api_password
  ota_password: !secret     wt32_eth01_ota_password
  #mqtt_broker_address: !secret   mqtt_broker_address
  led_gpio:                 GPIO5 #not applicable on WT32-ETH01 without additional LED
  #device_ip: 192.168.5.60

esphome:
  name: ${device_name}
  friendly_name: ${device_name_friendly}
  #platform: ESP32
  #board: esp-wrover-kit

esp32:
  board: wt32-eth01
  # board: esp32dev
  framework:
    type: arduino

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO0_IN
  phy_addr: 1
  power_pin: GPIO16
  #Optional manual IP
  #manual_ip:
  #  static_ip: $device_ip
  #  gateway: $network_gateway
  #  subnet: $network_subnet

ota:
  - platform: esphome
    password: $ota_password

# Set statul led for WT32-ETH01
status_led:
  pin: 
    number: 12
    inverted: true

external_components:
  - source:
      type: git
      url: https://github.com/karol27/Nice_BusT4_WT32-ETH01
    refresh: 0s
    
# Enable logging
logger:
  level: DEBUG
  baud_rate: 0

#captive_portal:

web_server:
  port: 80
#  js_include: "www.js"
#  js_url: ""
#  version: 2  

# Enable Home Assistant API
api:
  encryption:
    key: $api_password
  reboot_timeout: 0s # otherwise reboots when disconnected from hassio  
  services:
# to send hex commands to the bus T4
  - service: raw_command
    variables:
        raw_cmd: string
    then:
      lambda: |-
         nice_cover -> NiceBusT4::send_raw_cmd(raw_cmd);
         
  - service: send_inf_command
    variables:
       to_addr: string
       whose: string
       command: string
       type_command: string
       next_data: string
       data_on: bool
       data_command: string
    then:
      lambda: |-
        nice_cover -> NiceBusT4::send_inf_cmd(to_addr, whose, command, type_command, next_data, data_on, data_command);

# sash length recognition
  - service: gate_length_recognition
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("0b","01");

# BlueBus device recognition
  - service: devices_recognition
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("0a","01");         

# closing force
  - service: closing_force
    variables:
      force: string
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("4b", force);         

# opening force
  - service: opening_force
    variables:
      force: string
    then:
      lambda: |-
         nice_cover -> NiceBusT4::set_mcu("4a", force);

# Buttons for sending commands
button:
  - platform: template
    name: Step-by-step
    id: sbs
    on_press:
      lambda: |-
           nice_cover -> NiceBusT4::send_cmd(bus_t4::SBS);

  - platform: template
    name: Input status
    id: in_stat
    on_press:
      lambda: |-
           nice_cover -> NiceBusT4::send_raw_cmd("55.0D.00.03.00.66.08.06.6B.04.D0.99.00.00.4D.0D");

#         nice_cover -> NiceBusT4::send_raw_cmd("55 0c 00 ff 00 66 01 05 9D 01 82 01 64 E6 0c");
# 55.0E.00.03.00.81.08.07.8D.04.0B.A9.00.01.01.A6.0E поиск положений

  - platform: template
    name: Partial opening 1
    id: p_opn1
    on_press:
      lambda: |-
         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN1);
                      
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::STOP);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::OPEN);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::CLOSE);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN2);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN3);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN4);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN5);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::P_OPN6);
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLK_OPN);  # Разблокировать и открыть 
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::CLS_LOCK);  # Закрыть и блокировать
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLCK_CLS); # Разблокировать и Закрыть
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::LOCK);      # Блокировать
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::UNLOCK);    # Разблокировать
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_SBS);  # Ведущий SBS
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_OPN);  # Ведущий открыть
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::HOST_CLS);  # Ведущий закрыть
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_SBS); # Ведомый SBS
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_OPN); # Ведомый открыть
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::SLAVE_CLS); # Ведомый закрыть
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::AUTO_ON);   # Автооткрывание активно
#         nice_cover -> NiceBusT4::send_cmd(bus_t4::AUTO_OFF);  # Автооткрывание неактивно

cover:
- platform: bus_t4
  name: "Nice Cover"
  device_class: gate
  id: nice_cover
  
#  address: 0x0003            # drive address
#  use_address: 0x0081        # gateway address


# We work with the OXI receiver

# disable automatic closing of the gate, if necessary for loading and unloading operations
switch:
  - platform: template
    name: "Auto close"
    id: autoclose
    restore_mode: DISABLED
#    optimistic: true
    lambda: |-
      if (nice_cover -> NiceBusT4::autocls_flag) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      lambda: |-
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "a9", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "99", "00", true, "01");                
    turn_off_action:
      lambda: |-
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "a9", "00", true, "00");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "a9", "00", true, "00");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "80", "99", "00", true, "01");
        nice_cover -> NiceBusT4::send_inf_cmd("0003", "04", "84", "99", "00", true, "01");                        


              
#script:
#  - id: send_cmd
#    then:
#      - switch.turn_on: my_switch
#      - delay: 1s
#      - switch.turn_off: my_switch              
